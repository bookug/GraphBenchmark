/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : Sparql.g
 *     -                            On : 2012-10-05 15:14:37
 *     -                for the parser : SparqlParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
SparqlParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pSparqlParser, which is returned from a call to SparqlParserNew().
 *
 * The methods in pSparqlParser are  as follows:
 *
 *  - 
 SparqlParser_workload_return
      pSparqlParser->workload(pSparqlParser)
 *  - 
 SparqlParser_query_return
      pSparqlParser->query(pSparqlParser)
 *  - 
 SparqlParser_prologue_return
      pSparqlParser->prologue(pSparqlParser)
 *  - 
 SparqlParser_baseDecl_return
      pSparqlParser->baseDecl(pSparqlParser)
 *  - 
 SparqlParser_prefixDecl_return
      pSparqlParser->prefixDecl(pSparqlParser)
 *  - 
 SparqlParser_selectQuery_return
      pSparqlParser->selectQuery(pSparqlParser)
 *  - 
 SparqlParser_subSelect_return
      pSparqlParser->subSelect(pSparqlParser)
 *  - 
 SparqlParser_selectClause_return
      pSparqlParser->selectClause(pSparqlParser)
 *  - 
 SparqlParser_selectVariables_return
      pSparqlParser->selectVariables(pSparqlParser)
 *  - 
 SparqlParser_constructQuery_return
      pSparqlParser->constructQuery(pSparqlParser)
 *  - 
 SparqlParser_describeQuery_return
      pSparqlParser->describeQuery(pSparqlParser)
 *  - 
 SparqlParser_askQuery_return
      pSparqlParser->askQuery(pSparqlParser)
 *  - 
 SparqlParser_datasetClause_return
      pSparqlParser->datasetClause(pSparqlParser)
 *  - 
 SparqlParser_whereClause_return
      pSparqlParser->whereClause(pSparqlParser)
 *  - 
 SparqlParser_solutionModifier_return
      pSparqlParser->solutionModifier(pSparqlParser)
 *  - 
 SparqlParser_groupClause_return
      pSparqlParser->groupClause(pSparqlParser)
 *  - 
 SparqlParser_groupCondition_return
      pSparqlParser->groupCondition(pSparqlParser)
 *  - 
 SparqlParser_havingClause_return
      pSparqlParser->havingClause(pSparqlParser)
 *  - 
 SparqlParser_orderClause_return
      pSparqlParser->orderClause(pSparqlParser)
 *  - 
 SparqlParser_orderCondition_return
      pSparqlParser->orderCondition(pSparqlParser)
 *  - 
 SparqlParser_limitOffsetClauses_return
      pSparqlParser->limitOffsetClauses(pSparqlParser)
 *  - 
 SparqlParser_limitClause_return
      pSparqlParser->limitClause(pSparqlParser)
 *  - 
 SparqlParser_offsetClause_return
      pSparqlParser->offsetClause(pSparqlParser)
 *  - 
 SparqlParser_bindingsClause_return
      pSparqlParser->bindingsClause(pSparqlParser)
 *  - 
 SparqlParser_bindingValueList_return
      pSparqlParser->bindingValueList(pSparqlParser)
 *  - 
 SparqlParser_bindingValue_return
      pSparqlParser->bindingValue(pSparqlParser)
 *  - 
 SparqlParser_update_return
      pSparqlParser->update(pSparqlParser)
 *  - 
 SparqlParser_load_return
      pSparqlParser->load(pSparqlParser)
 *  - 
 SparqlParser_clear_return
      pSparqlParser->clear(pSparqlParser)
 *  - 
 SparqlParser_drop_return
      pSparqlParser->drop(pSparqlParser)
 *  - 
 SparqlParser_create_return
      pSparqlParser->create(pSparqlParser)
 *  - 
 SparqlParser_add_return
      pSparqlParser->add(pSparqlParser)
 *  - 
 SparqlParser_move_return
      pSparqlParser->move(pSparqlParser)
 *  - 
 SparqlParser_copy_return
      pSparqlParser->copy(pSparqlParser)
 *  - 
 SparqlParser_insert_return
      pSparqlParser->insert(pSparqlParser)
 *  - 
 SparqlParser_delete_exp_return
      pSparqlParser->delete_exp(pSparqlParser)
 *  - 
 SparqlParser_deleteData_return
      pSparqlParser->deleteData(pSparqlParser)
 *  - 
 SparqlParser_deleteWhere_return
      pSparqlParser->deleteWhere(pSparqlParser)
 *  - 
 SparqlParser_modify_return
      pSparqlParser->modify(pSparqlParser)
 *  - 
 SparqlParser_deleteClause_return
      pSparqlParser->deleteClause(pSparqlParser)
 *  - 
 SparqlParser_insertClause_return
      pSparqlParser->insertClause(pSparqlParser)
 *  - 
 SparqlParser_usingClause_return
      pSparqlParser->usingClause(pSparqlParser)
 *  - 
 SparqlParser_graphOrDefault_return
      pSparqlParser->graphOrDefault(pSparqlParser)
 *  - 
 SparqlParser_graphRef_return
      pSparqlParser->graphRef(pSparqlParser)
 *  - 
 SparqlParser_graphRefAll_return
      pSparqlParser->graphRefAll(pSparqlParser)
 *  - 
 SparqlParser_quadPattern_return
      pSparqlParser->quadPattern(pSparqlParser)
 *  - 
 SparqlParser_quads_return
      pSparqlParser->quads(pSparqlParser)
 *  - 
 SparqlParser_quadsNotTriples_return
      pSparqlParser->quadsNotTriples(pSparqlParser)
 *  - 
 SparqlParser_triplesTemplate_return
      pSparqlParser->triplesTemplate(pSparqlParser)
 *  - 
 SparqlParser_groupGraphPattern_return
      pSparqlParser->groupGraphPattern(pSparqlParser)
 *  - 
 SparqlParser_groupGraphPatternSub_return
      pSparqlParser->groupGraphPatternSub(pSparqlParser)
 *  - 
 SparqlParser_groupGraphPatternSubCache_return
      pSparqlParser->groupGraphPatternSubCache(pSparqlParser)
 *  - 
 SparqlParser_triplesBlock_return
      pSparqlParser->triplesBlock(pSparqlParser)
 *  - 
 SparqlParser_graphPatternNotTriples_return
      pSparqlParser->graphPatternNotTriples(pSparqlParser)
 *  - 
 SparqlParser_optionalGraphPattern_return
      pSparqlParser->optionalGraphPattern(pSparqlParser)
 *  - 
 SparqlParser_graphGraphPattern_return
      pSparqlParser->graphGraphPattern(pSparqlParser)
 *  - 
 SparqlParser_serviceGraphPattern_return
      pSparqlParser->serviceGraphPattern(pSparqlParser)
 *  - 
 SparqlParser_bind_exp_return
      pSparqlParser->bind_exp(pSparqlParser)
 *  - 
 SparqlParser_minusGraphPattern_return
      pSparqlParser->minusGraphPattern(pSparqlParser)
 *  - 
 SparqlParser_groupOrUnionGraphPattern_return
      pSparqlParser->groupOrUnionGraphPattern(pSparqlParser)
 *  - 
 SparqlParser_filter_return
      pSparqlParser->filter(pSparqlParser)
 *  - 
 SparqlParser_constraint_return
      pSparqlParser->constraint(pSparqlParser)
 *  - 
 SparqlParser_functionCall_return
      pSparqlParser->functionCall(pSparqlParser)
 *  - 
 SparqlParser_argList_return
      pSparqlParser->argList(pSparqlParser)
 *  - 
 SparqlParser_expressionList_return
      pSparqlParser->expressionList(pSparqlParser)
 *  - 
 SparqlParser_constructTemplate_return
      pSparqlParser->constructTemplate(pSparqlParser)
 *  - 
 SparqlParser_constructTriples_return
      pSparqlParser->constructTriples(pSparqlParser)
 *  - 
 SparqlParser_triplesSameSubject_return
      pSparqlParser->triplesSameSubject(pSparqlParser)
 *  - 
 SparqlParser_propertyListNotEmpty_return
      pSparqlParser->propertyListNotEmpty(pSparqlParser)
 *  - 
 SparqlParser_objectList_return
      pSparqlParser->objectList(pSparqlParser)
 *  - 
 SparqlParser_verb_return
      pSparqlParser->verb(pSparqlParser)
 *  - 
 SparqlParser_triplesSameSubjectPath_return
      pSparqlParser->triplesSameSubjectPath(pSparqlParser)
 *  - 
 SparqlParser_propertyListNotEmptyPath_return
      pSparqlParser->propertyListNotEmptyPath(pSparqlParser)
 *  - 
 SparqlParser_verbSimpleOrPath_return
      pSparqlParser->verbSimpleOrPath(pSparqlParser)
 *  - 
 SparqlParser_verbPath_return
      pSparqlParser->verbPath(pSparqlParser)
 *  - 
 SparqlParser_verbSimple_return
      pSparqlParser->verbSimple(pSparqlParser)
 *  - 
 SparqlParser_path_return
      pSparqlParser->path(pSparqlParser)
 *  - 
 SparqlParser_pathSequence_return
      pSparqlParser->pathSequence(pSparqlParser)
 *  - 
 SparqlParser_pathEltOrInverse_return
      pSparqlParser->pathEltOrInverse(pSparqlParser)
 *  - 
 SparqlParser_pathElt_return
      pSparqlParser->pathElt(pSparqlParser)
 *  - 
 SparqlParser_pathMod_return
      pSparqlParser->pathMod(pSparqlParser)
 *  - 
 SparqlParser_pathPrimary_return
      pSparqlParser->pathPrimary(pSparqlParser)
 *  - 
 SparqlParser_pathNegatedPropertySet_return
      pSparqlParser->pathNegatedPropertySet(pSparqlParser)
 *  - 
 SparqlParser_pathOneInPropertySet_return
      pSparqlParser->pathOneInPropertySet(pSparqlParser)
 *  - 
 SparqlParser_triplesNode_return
      pSparqlParser->triplesNode(pSparqlParser)
 *  - 
 SparqlParser_graphNode_return
      pSparqlParser->graphNode(pSparqlParser)
 *  - 
 SparqlParser_varOrTerm_return
      pSparqlParser->varOrTerm(pSparqlParser)
 *  - 
 SparqlParser_varOrIRIref_return
      pSparqlParser->varOrIRIref(pSparqlParser)
 *  - 
 SparqlParser_var_return
      pSparqlParser->var(pSparqlParser)
 *  - 
 SparqlParser_graphTerm_return
      pSparqlParser->graphTerm(pSparqlParser)
 *  - 
 SparqlParser_nil_return
      pSparqlParser->nil(pSparqlParser)
 *  - 
 SparqlParser_expression_return
      pSparqlParser->expression(pSparqlParser)
 *  - 
 SparqlParser_conditionalOrExpression_return
      pSparqlParser->conditionalOrExpression(pSparqlParser)
 *  - 
 SparqlParser_conditionalAndExpression_return
      pSparqlParser->conditionalAndExpression(pSparqlParser)
 *  - 
 SparqlParser_valueLogical_return
      pSparqlParser->valueLogical(pSparqlParser)
 *  - 
 SparqlParser_relationalExpression_return
      pSparqlParser->relationalExpression(pSparqlParser)
 *  - 
 SparqlParser_numericExpression_return
      pSparqlParser->numericExpression(pSparqlParser)
 *  - 
 SparqlParser_additiveExpression_return
      pSparqlParser->additiveExpression(pSparqlParser)
 *  - 
 SparqlParser_additiveOperator_return
      pSparqlParser->additiveOperator(pSparqlParser)
 *  - 
 SparqlParser_multiplicativeExpression_return
      pSparqlParser->multiplicativeExpression(pSparqlParser)
 *  - 
 SparqlParser_multiplicativeOperator_return
      pSparqlParser->multiplicativeOperator(pSparqlParser)
 *  - 
 SparqlParser_unaryExpression_return
      pSparqlParser->unaryExpression(pSparqlParser)
 *  - 
 SparqlParser_primaryExpression_return
      pSparqlParser->primaryExpression(pSparqlParser)
 *  - 
 SparqlParser_brackettedExpression_return
      pSparqlParser->brackettedExpression(pSparqlParser)
 *  - 
 SparqlParser_builtInCall_return
      pSparqlParser->builtInCall(pSparqlParser)
 *  - 
 SparqlParser_regexExpression_return
      pSparqlParser->regexExpression(pSparqlParser)
 *  - 
 SparqlParser_subStringExpression_return
      pSparqlParser->subStringExpression(pSparqlParser)
 *  - 
 SparqlParser_existsFunction_return
      pSparqlParser->existsFunction(pSparqlParser)
 *  - 
 SparqlParser_notExistsFunction_return
      pSparqlParser->notExistsFunction(pSparqlParser)
 *  - 
 SparqlParser_aggregate_return
      pSparqlParser->aggregate(pSparqlParser)
 *  - 
 SparqlParser_iriRefOrFunction_return
      pSparqlParser->iriRefOrFunction(pSparqlParser)
 *  - 
 SparqlParser_rdfLiteral_return
      pSparqlParser->rdfLiteral(pSparqlParser)
 *  - 
 SparqlParser_numericLiteral_return
      pSparqlParser->numericLiteral(pSparqlParser)
 *  - 
 SparqlParser_numericLiteralUnsigned_return
      pSparqlParser->numericLiteralUnsigned(pSparqlParser)
 *  - 
 SparqlParser_numericLiteralPositive_return
      pSparqlParser->numericLiteralPositive(pSparqlParser)
 *  - 
 SparqlParser_numericLiteralNegative_return
      pSparqlParser->numericLiteralNegative(pSparqlParser)
 *  - 
 SparqlParser_booleanLiteral_return
      pSparqlParser->booleanLiteral(pSparqlParser)
 *  - 
 SparqlParser_string_return
      pSparqlParser->string(pSparqlParser)
 *  - 
 SparqlParser_iriRef_return
      pSparqlParser->iriRef(pSparqlParser)
 *  - 
 SparqlParser_prefixedName_return
      pSparqlParser->prefixedName(pSparqlParser)
 *  - 
 SparqlParser_blankNode_return
      pSparqlParser->blankNode(pSparqlParser)
 *  - 
 SparqlParser_anon_return
      pSparqlParser->anon(pSparqlParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_SparqlParser_H
#define _SparqlParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include"antlr3.h"

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct SparqlParser_Ctx_struct SparqlParser, * pSparqlParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif
typedef struct SparqlParser_workload_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_workload_return;



typedef struct SparqlParser_query_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_query_return;



typedef struct SparqlParser_prologue_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_prologue_return;



typedef struct SparqlParser_baseDecl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_baseDecl_return;



typedef struct SparqlParser_prefixDecl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_prefixDecl_return;



typedef struct SparqlParser_selectQuery_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_selectQuery_return;



typedef struct SparqlParser_subSelect_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_subSelect_return;



typedef struct SparqlParser_selectClause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_selectClause_return;



typedef struct SparqlParser_selectVariables_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_selectVariables_return;



typedef struct SparqlParser_constructQuery_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_constructQuery_return;



typedef struct SparqlParser_describeQuery_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_describeQuery_return;



typedef struct SparqlParser_askQuery_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_askQuery_return;



typedef struct SparqlParser_datasetClause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_datasetClause_return;



typedef struct SparqlParser_whereClause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_whereClause_return;



typedef struct SparqlParser_solutionModifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_solutionModifier_return;



typedef struct SparqlParser_groupClause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_groupClause_return;



typedef struct SparqlParser_groupCondition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_groupCondition_return;



typedef struct SparqlParser_havingClause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_havingClause_return;



typedef struct SparqlParser_orderClause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_orderClause_return;



typedef struct SparqlParser_orderCondition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_orderCondition_return;



typedef struct SparqlParser_limitOffsetClauses_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_limitOffsetClauses_return;



typedef struct SparqlParser_limitClause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_limitClause_return;



typedef struct SparqlParser_offsetClause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_offsetClause_return;



typedef struct SparqlParser_bindingsClause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_bindingsClause_return;



typedef struct SparqlParser_bindingValueList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_bindingValueList_return;



typedef struct SparqlParser_bindingValue_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_bindingValue_return;



typedef struct SparqlParser_update_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_update_return;



typedef struct SparqlParser_load_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_load_return;



typedef struct SparqlParser_clear_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_clear_return;



typedef struct SparqlParser_drop_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_drop_return;



typedef struct SparqlParser_create_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_create_return;



typedef struct SparqlParser_add_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_add_return;



typedef struct SparqlParser_move_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_move_return;



typedef struct SparqlParser_copy_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_copy_return;



typedef struct SparqlParser_insert_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_insert_return;



typedef struct SparqlParser_delete_exp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_delete_exp_return;



typedef struct SparqlParser_deleteData_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_deleteData_return;



typedef struct SparqlParser_deleteWhere_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_deleteWhere_return;



typedef struct SparqlParser_modify_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_modify_return;



typedef struct SparqlParser_deleteClause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_deleteClause_return;



typedef struct SparqlParser_insertClause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_insertClause_return;



typedef struct SparqlParser_usingClause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_usingClause_return;



typedef struct SparqlParser_graphOrDefault_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_graphOrDefault_return;



typedef struct SparqlParser_graphRef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_graphRef_return;



typedef struct SparqlParser_graphRefAll_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_graphRefAll_return;



typedef struct SparqlParser_quadPattern_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_quadPattern_return;



typedef struct SparqlParser_quads_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_quads_return;



typedef struct SparqlParser_quadsNotTriples_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_quadsNotTriples_return;



typedef struct SparqlParser_triplesTemplate_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_triplesTemplate_return;



typedef struct SparqlParser_groupGraphPattern_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_groupGraphPattern_return;



typedef struct SparqlParser_groupGraphPatternSub_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_groupGraphPatternSub_return;



typedef struct SparqlParser_groupGraphPatternSubCache_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_groupGraphPatternSubCache_return;



typedef struct SparqlParser_triplesBlock_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_triplesBlock_return;



typedef struct SparqlParser_graphPatternNotTriples_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_graphPatternNotTriples_return;



typedef struct SparqlParser_optionalGraphPattern_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_optionalGraphPattern_return;



typedef struct SparqlParser_graphGraphPattern_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_graphGraphPattern_return;



typedef struct SparqlParser_serviceGraphPattern_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_serviceGraphPattern_return;



typedef struct SparqlParser_bind_exp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_bind_exp_return;



typedef struct SparqlParser_minusGraphPattern_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_minusGraphPattern_return;



typedef struct SparqlParser_groupOrUnionGraphPattern_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_groupOrUnionGraphPattern_return;



typedef struct SparqlParser_filter_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_filter_return;



typedef struct SparqlParser_constraint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_constraint_return;



typedef struct SparqlParser_functionCall_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_functionCall_return;



typedef struct SparqlParser_argList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_argList_return;



typedef struct SparqlParser_expressionList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_expressionList_return;



typedef struct SparqlParser_constructTemplate_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_constructTemplate_return;



typedef struct SparqlParser_constructTriples_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_constructTriples_return;



typedef struct SparqlParser_triplesSameSubject_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_triplesSameSubject_return;



typedef struct SparqlParser_propertyListNotEmpty_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_propertyListNotEmpty_return;



typedef struct SparqlParser_objectList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_objectList_return;



typedef struct SparqlParser_verb_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_verb_return;



typedef struct SparqlParser_triplesSameSubjectPath_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_triplesSameSubjectPath_return;



typedef struct SparqlParser_propertyListNotEmptyPath_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_propertyListNotEmptyPath_return;



typedef struct SparqlParser_verbSimpleOrPath_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_verbSimpleOrPath_return;



typedef struct SparqlParser_verbPath_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_verbPath_return;



typedef struct SparqlParser_verbSimple_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_verbSimple_return;



typedef struct SparqlParser_path_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_path_return;



typedef struct SparqlParser_pathSequence_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_pathSequence_return;



typedef struct SparqlParser_pathEltOrInverse_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_pathEltOrInverse_return;



typedef struct SparqlParser_pathElt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_pathElt_return;



typedef struct SparqlParser_pathMod_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_pathMod_return;



typedef struct SparqlParser_pathPrimary_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_pathPrimary_return;



typedef struct SparqlParser_pathNegatedPropertySet_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_pathNegatedPropertySet_return;



typedef struct SparqlParser_pathOneInPropertySet_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_pathOneInPropertySet_return;



typedef struct SparqlParser_triplesNode_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_triplesNode_return;



typedef struct SparqlParser_graphNode_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_graphNode_return;



typedef struct SparqlParser_varOrTerm_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_varOrTerm_return;



typedef struct SparqlParser_varOrIRIref_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_varOrIRIref_return;



typedef struct SparqlParser_var_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_var_return;



typedef struct SparqlParser_graphTerm_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_graphTerm_return;



typedef struct SparqlParser_nil_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_nil_return;



typedef struct SparqlParser_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_expression_return;



typedef struct SparqlParser_conditionalOrExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_conditionalOrExpression_return;



typedef struct SparqlParser_conditionalAndExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_conditionalAndExpression_return;



typedef struct SparqlParser_valueLogical_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_valueLogical_return;



typedef struct SparqlParser_relationalExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_relationalExpression_return;



typedef struct SparqlParser_numericExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_numericExpression_return;



typedef struct SparqlParser_additiveExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_additiveExpression_return;



typedef struct SparqlParser_additiveOperator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_additiveOperator_return;



typedef struct SparqlParser_multiplicativeExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_multiplicativeExpression_return;



typedef struct SparqlParser_multiplicativeOperator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_multiplicativeOperator_return;



typedef struct SparqlParser_unaryExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_unaryExpression_return;



typedef struct SparqlParser_primaryExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_primaryExpression_return;



typedef struct SparqlParser_brackettedExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_brackettedExpression_return;



typedef struct SparqlParser_builtInCall_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_builtInCall_return;



typedef struct SparqlParser_regexExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_regexExpression_return;



typedef struct SparqlParser_subStringExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_subStringExpression_return;



typedef struct SparqlParser_existsFunction_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_existsFunction_return;



typedef struct SparqlParser_notExistsFunction_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_notExistsFunction_return;



typedef struct SparqlParser_aggregate_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_aggregate_return;



typedef struct SparqlParser_iriRefOrFunction_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_iriRefOrFunction_return;



typedef struct SparqlParser_rdfLiteral_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_rdfLiteral_return;



typedef struct SparqlParser_numericLiteral_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_numericLiteral_return;



typedef struct SparqlParser_numericLiteralUnsigned_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_numericLiteralUnsigned_return;



typedef struct SparqlParser_numericLiteralPositive_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_numericLiteralPositive_return;



typedef struct SparqlParser_numericLiteralNegative_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_numericLiteralNegative_return;



typedef struct SparqlParser_booleanLiteral_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_booleanLiteral_return;



typedef struct SparqlParser_string_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_string_return;



typedef struct SparqlParser_iriRef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_iriRef_return;



typedef struct SparqlParser_prefixedName_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_prefixedName_return;



typedef struct SparqlParser_blankNode_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_blankNode_return;



typedef struct SparqlParser_anon_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SparqlParser_anon_return;




/** Context tracking structure for 
SparqlParser

 */
struct SparqlParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     SparqlParser_workload_return
     (*workload)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_query_return
     (*query)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_prologue_return
     (*prologue)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_baseDecl_return
     (*baseDecl)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_prefixDecl_return
     (*prefixDecl)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_selectQuery_return
     (*selectQuery)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_subSelect_return
     (*subSelect)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_selectClause_return
     (*selectClause)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_selectVariables_return
     (*selectVariables)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_constructQuery_return
     (*constructQuery)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_describeQuery_return
     (*describeQuery)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_askQuery_return
     (*askQuery)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_datasetClause_return
     (*datasetClause)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_whereClause_return
     (*whereClause)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_solutionModifier_return
     (*solutionModifier)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_groupClause_return
     (*groupClause)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_groupCondition_return
     (*groupCondition)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_havingClause_return
     (*havingClause)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_orderClause_return
     (*orderClause)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_orderCondition_return
     (*orderCondition)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_limitOffsetClauses_return
     (*limitOffsetClauses)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_limitClause_return
     (*limitClause)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_offsetClause_return
     (*offsetClause)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_bindingsClause_return
     (*bindingsClause)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_bindingValueList_return
     (*bindingValueList)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_bindingValue_return
     (*bindingValue)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_update_return
     (*update)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_load_return
     (*load)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_clear_return
     (*clear)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_drop_return
     (*drop)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_create_return
     (*create)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_add_return
     (*add)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_move_return
     (*move)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_copy_return
     (*copy)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_insert_return
     (*insert)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_delete_exp_return
     (*delete_exp)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_deleteData_return
     (*deleteData)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_deleteWhere_return
     (*deleteWhere)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_modify_return
     (*modify)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_deleteClause_return
     (*deleteClause)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_insertClause_return
     (*insertClause)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_usingClause_return
     (*usingClause)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_graphOrDefault_return
     (*graphOrDefault)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_graphRef_return
     (*graphRef)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_graphRefAll_return
     (*graphRefAll)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_quadPattern_return
     (*quadPattern)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_quads_return
     (*quads)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_quadsNotTriples_return
     (*quadsNotTriples)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_triplesTemplate_return
     (*triplesTemplate)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_groupGraphPattern_return
     (*groupGraphPattern)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_groupGraphPatternSub_return
     (*groupGraphPatternSub)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_groupGraphPatternSubCache_return
     (*groupGraphPatternSubCache)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_triplesBlock_return
     (*triplesBlock)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_graphPatternNotTriples_return
     (*graphPatternNotTriples)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_optionalGraphPattern_return
     (*optionalGraphPattern)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_graphGraphPattern_return
     (*graphGraphPattern)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_serviceGraphPattern_return
     (*serviceGraphPattern)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_bind_exp_return
     (*bind_exp)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_minusGraphPattern_return
     (*minusGraphPattern)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_groupOrUnionGraphPattern_return
     (*groupOrUnionGraphPattern)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_filter_return
     (*filter)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_constraint_return
     (*constraint)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_functionCall_return
     (*functionCall)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_argList_return
     (*argList)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_expressionList_return
     (*expressionList)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_constructTemplate_return
     (*constructTemplate)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_constructTriples_return
     (*constructTriples)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_triplesSameSubject_return
     (*triplesSameSubject)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_propertyListNotEmpty_return
     (*propertyListNotEmpty)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_objectList_return
     (*objectList)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_verb_return
     (*verb)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_triplesSameSubjectPath_return
     (*triplesSameSubjectPath)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_propertyListNotEmptyPath_return
     (*propertyListNotEmptyPath)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_verbSimpleOrPath_return
     (*verbSimpleOrPath)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_verbPath_return
     (*verbPath)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_verbSimple_return
     (*verbSimple)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_path_return
     (*path)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_pathSequence_return
     (*pathSequence)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_pathEltOrInverse_return
     (*pathEltOrInverse)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_pathElt_return
     (*pathElt)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_pathMod_return
     (*pathMod)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_pathPrimary_return
     (*pathPrimary)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_pathNegatedPropertySet_return
     (*pathNegatedPropertySet)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_pathOneInPropertySet_return
     (*pathOneInPropertySet)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_triplesNode_return
     (*triplesNode)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_graphNode_return
     (*graphNode)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_varOrTerm_return
     (*varOrTerm)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_varOrIRIref_return
     (*varOrIRIref)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_var_return
     (*var)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_graphTerm_return
     (*graphTerm)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_nil_return
     (*nil)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_expression_return
     (*expression)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_conditionalOrExpression_return
     (*conditionalOrExpression)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_conditionalAndExpression_return
     (*conditionalAndExpression)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_valueLogical_return
     (*valueLogical)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_relationalExpression_return
     (*relationalExpression)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_numericExpression_return
     (*numericExpression)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_additiveExpression_return
     (*additiveExpression)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_additiveOperator_return
     (*additiveOperator)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_multiplicativeExpression_return
     (*multiplicativeExpression)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_multiplicativeOperator_return
     (*multiplicativeOperator)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_unaryExpression_return
     (*unaryExpression)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_primaryExpression_return
     (*primaryExpression)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_brackettedExpression_return
     (*brackettedExpression)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_builtInCall_return
     (*builtInCall)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_regexExpression_return
     (*regexExpression)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_subStringExpression_return
     (*subStringExpression)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_existsFunction_return
     (*existsFunction)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_notExistsFunction_return
     (*notExistsFunction)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_aggregate_return
     (*aggregate)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_iriRefOrFunction_return
     (*iriRefOrFunction)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_rdfLiteral_return
     (*rdfLiteral)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_numericLiteral_return
     (*numericLiteral)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_numericLiteralUnsigned_return
     (*numericLiteralUnsigned)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_numericLiteralPositive_return
     (*numericLiteralPositive)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_numericLiteralNegative_return
     (*numericLiteralNegative)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_booleanLiteral_return
     (*booleanLiteral)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_string_return
     (*string)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_iriRef_return
     (*iriRef)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_prefixedName_return
     (*prefixedName)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_blankNode_return
     (*blankNode)	(struct SparqlParser_Ctx_struct * ctx);

     SparqlParser_anon_return
     (*anon)	(struct SparqlParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct SparqlParser_Ctx_struct * ctx);
    void	    (*free)   (struct SparqlParser_Ctx_struct * ctx);
/* @headerFile.members() */
pANTLR3_BASE_TREE_ADAPTOR	adaptor;
pANTLR3_VECTOR_FACTORY		vectors;
/* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pSparqlParser SparqlParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pSparqlParser SparqlParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define A      4
#define ABS      5
#define ADD      6
#define ALL      7
#define AND      8
#define ANY      9
#define ARG_LIST      10
#define AS      11
#define ASC      12
#define ASK      13
#define ASTERISK      14
#define AVG      15
#define BASE      16
#define BIND      17
#define BINDINGS      18
#define BINDING_VALUE      19
#define BLANK_NODE      20
#define BLANK_NODE_LABEL      21
#define BNODE      22
#define BOUND      23
#define BY      24
#define CEIL      25
#define CLEAR      26
#define CLOSE_BRACE      27
#define CLOSE_CURLY_BRACE      28
#define CLOSE_SQUARE_BRACKET      29
#define COALESCE      30
#define COLLECTION      31
#define COMMA      32
#define COMMENT      33
#define CONCAT      34
#define CONSTRUCT      35
#define CONSTRUCT_TRIPLES      36
#define CONTAINS      37
#define COPY      38
#define COUNT      39
#define CREATE      40
#define DATA      41
#define DATATYPE      42
#define DAY      43
#define DECIMAL      44
#define DECIMAL_NEGATIVE      45
#define DECIMAL_POSITIVE      46
#define DEFAULT      47
#define DELETE      48
#define DESC      49
#define DESCRIBE      50
#define DIGIT      51
#define DISTINCT      52
#define DIVIDE      53
#define DOT      54
#define DOUBLE_PP      55
#define DOUBLE_NEGATIVE      56
#define DOUBLE_POSITIVE      57
#define DROP      58
#define ECHAR      59
#define ENCODE_FOR_URI      60
#define EOL      61
#define EQUAL      62
#define EXISTS      63
#define EXPONENT      64
#define EXPRESSION_LIST      65
#define FALSE      66
#define FILTER      67
#define FLOOR      68
#define FROM      69
#define FUNCTION      70
#define GRAPH_PP      71
#define GREATER      72
#define GREATER_EQUAL      73
#define GROUP      74
#define GROUP_BY      75
#define GROUP_CONCAT      76
#define GROUP_GRAPH_PATTERN      77
#define HAVING      78
#define HOURS      79
#define IF      80
#define IN      81
#define INSERT      82
#define INTEGER      83
#define INTEGER_NEGATIVE      84
#define INTEGER_POSITIVE      85
#define INTO      86
#define INVERSE      87
#define IRI      88
#define IRI_REF      89
#define IRI_REF_CHARACTERS      90
#define ISBLANK      91
#define ISIRI      92
#define ISLITERAL      93
#define ISNUMERIC      94
#define ISURI      95
#define LANG      96
#define LANGMATCHES      97
#define LANGTAG      98
#define LCASE      99
#define LESS      100
#define LESS_EQUAL      101
#define LIMIT      102
#define LOAD      103
#define MAX_PP      104
#define MD5      105
#define MIN_PP      106
#define MINUS      107
#define MINUS_KEYWORD      108
#define MINUTES      109
#define MODIFY      110
#define MONTH      111
#define MOVE      112
#define NAMED      113
#define NEGATION      114
#define NOT      115
#define NOT_EQUAL      116
#define NOT_EXISTS      117
#define NOW      118
#define OBJECT      119
#define OFFSET      120
#define OPEN_BRACE      121
#define OPEN_CURLY_BRACE      122
#define OPEN_SQUARE_BRACKET      123
#define OPTIONAL      124
#define OR      125
#define ORDER      126
#define ORDER_BY      127
#define ORDER_CONDITION      128
#define PATH      129
#define PATH_NEGATED      130
#define PATH_PRIMARY      131
#define PATH_SEQUENCE      132
#define PIPE      133
#define PLUS      134
#define PNAME_LN      135
#define PNAME_NS      136
#define PN_CHARS      137
#define PN_CHARS_BASE      138
#define PN_CHARS_U      139
#define PN_LOCAL      140
#define PN_PREFIX      141
#define PREDICATE      142
#define PREFIX      143
#define PROLOGUE      144
#define QUERY      145
#define QUESTION_MARK      146
#define RAND      147
#define REDUCED      148
#define REFERENCE      149
#define REGEX      150
#define ROUND      151
#define SAMETERM      152
#define SAMPLE      153
#define SECONDS      154
#define SELECT      155
#define SELECT_CLAUSE      156
#define SEMICOLON      157
#define SEPARATOR      158
#define SERVICE      159
#define SHA1      160
#define SHA224      161
#define SHA256      162
#define SHA384      163
#define SHA512      164
#define SIGN      165
#define SILENT      166
#define STR      167
#define STRDT      168
#define STRENDS      169
#define STRING_LITERAL1      170
#define STRING_LITERAL2      171
#define STRING_LITERAL_LONG1      172
#define STRING_LITERAL_LONG2      173
#define STRLANG      174
#define STRLEN      175
#define STRSTARTS      176
#define SUBJECT      177
#define SUBSELECT      178
#define SUBSTR      179
#define SUM_PP      180
#define TIMEZONE      181
#define TO      182
#define TRIPLES_BLOCK      183
#define TRIPLES_NODE      184
#define TRIPLES_SAME_SUBJECT      185
#define TRIPLES_TEMPLATE      186
#define TRUE      187
#define TZ      188
#define UCASE      189
#define UNARY      190
#define UNARY_MINUS      191
#define UNARY_NOT      192
#define UNARY_PLUS      193
#define UNDEF      194
#define UNION      195
#define UPDATE      196
#define URI      197
#define USING      198
#define VAR      199
#define VAR1      200
#define VAR2      201
#define VARNAME      202
#define WHERE      203
#define WHERE_CLAUSE      204
#define WITH      205
#define WORKLOAD      206
#define WS      207
#define YEAR      208
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for SparqlParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
